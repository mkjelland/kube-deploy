/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package director_test

import (
	"testing"

	"k8s.io/kube-deploy/cluster-api-bosh/cloud/bosh-create-env/director"
)

// Generated by running `bosh -d kubo manifest`
const example = `
---
features:
  use_dns_addresses: true
instance_groups:
- azs:
  - z1
  instances: 1
  jobs:
  - name: kubo-dns-aliases
    release: kubo
  - name: cloud-provider
    properties:
      cloud-provider:
        gce:
          network-name: kubo-network
          project-id: graphite-test-mkjelland
          worker-node-tag: demo-bosh-kubo-worker
        type: gce
    provides:
      cloud-provider:
        as: master
    release: kubo
  - name: flanneld
    release: kubo
  - name: kubernetes-api
    properties:
      admin-password: "((kubo-admin-password))"
      admin-username: admin
      authorization-mode: rbac
      backend_port: 8443
      kube-proxy-password: "((kube-proxy-password))"
      kube-scheduler-password: "((kube-scheduler-password))"
      kubelet-password: "((kubelet-password))"
      port: 8443
      route-sync-password: "((route-sync-password))"
      tls:
        kubernetes:
          ca: "((tls-kubernetes.ca))"
          certificate: "((tls-kubernetes.certificate))"
          private_key: "((tls-kubernetes.private_key))"
    release: kubo
  - name: kubernetes-controller-manager
    properties:
      tls:
        kubernetes: "((tls-kubernetes))"
    release: kubo
  - name: kubernetes-scheduler
    properties:
      api-token: "((kube-scheduler-password))"
    release: kubo
  - consumes:
      cloud-provider:
        from: master
    name: kubernetes-system-specs
    properties:
      admin-password: "((kubo-admin-password))"
      admin-username: admin
      api-token: "((kubelet-password))"
      authorization-mode: rbac
      tls:
        kubernetes: "((tls-kubernetes))"
    release: kubo
  - name: etcd
    properties:
      etcd:
        delete_data_dir_on_stop: false
        peer_require_ssl: false
        require_ssl: false
    release: kubo-etcd
  name: master
  networks:
  - name: kubo-network
  persistent_disk_type: 5120
  stemcell: trusty
  vm_type: master
- azs:
  - z1
  instances: 3
  jobs:
  - name: kubo-dns-aliases
    release: kubo
  - name: flanneld
    release: kubo
  - name: docker
    properties:
      bip: 172.17.0.1/24
      default_ulimits:
      - nofile=65536
      env: {}
      flannel: true
      ip_masq: false
      iptables: false
      log_level: error
      storage_driver: overlay
      store_dir: "/var/vcap/data"
      tls_cacert: "((tls-docker.ca))"
      tls_cert: "((tls-docker.certificate))"
      tls_key: "((tls-docker.private_key))"
    release: docker
  - name: cloud-provider
    properties:
      cloud-provider:
        gce:
          network-name: kubo-network
          project-id: graphite-test-mkjelland
          worker-node-tag: demo-bosh-kubo-worker
        type: gce
    release: kubo
  - name: kubelet
    properties:
      api-token: "((kubelet-password))"
      tls:
        kubelet: "((tls-kubelet))"
        kubernetes: "((tls-kubernetes))"
    release: kubo
  - name: kubernetes-proxy
    properties:
      api-token: "((kube-proxy-password))"
      tls:
        kubernetes: "((tls-kubernetes))"
    release: kubo
  name: worker
  networks:
  - name: kubo-network
  persistent_disk_type: 10240
  stemcell: trusty
  vm_type: worker
name: kubo
releases:
- name: kubo-etcd
  sha1: b288cf049547a4ca241f1e041e03f2d0040fb4c3
  url: https://github.com/pivotal-cf-experimental/kubo-etcd/releases/download/v6/kubo-etcd.6.tgz
  version: '6'
- name: kubo
  version: 0.10.0
- name: docker
  sha1: f79a70452b3ddae52f5ac78dd37ff8d9e6ec19e2
  url: https://github.com/cloudfoundry-community/docker-boshrelease/releases/download/v30.1.4/docker-30.1.4.tgz
  version: 30.1.4
stemcells:
- alias: trusty
  os: ubuntu-trusty
  version: '3468.15'
update:
  canaries: 1
  canary_watch_time: 10000-300000
  max_in_flight: 1
  serial: true
  update_watch_time: 10000-300000
variables:
- name: kubo-admin-password
  type: password
- name: kubelet-password
  type: password
- name: kube-proxy-password
  type: password
- name: kube-scheduler-password
  type: password
- name: route-sync-password
  type: password
- name: kubo_ca
  options:
    common_name: ca
    is_ca: true
  type: certificate
- name: tls-kubelet
  options:
    alternative_names: []
    ca: kubo_ca
    common_name: kubelet.kubo.internal
    organization: system:nodes
  type: certificate
- name: tls-kubernetes
  options:
    alternative_names:
    - 35.227.166.27
    - 10.100.200.1
    - kubernetes
    - kubernetes.default
    - kubernetes.default.svc
    - kubernetes.default.svc.cluster.local
    - master.kubo
    ca: kubo_ca
    common_name: 35.227.166.27
    organization: system:masters
  type: certificate
- name: tls-docker
  options:
    ca: kubo_ca
    common_name: docker.kubo.internal
  type: certificate
`

func TestParse(t *testing.T) {
	_, err := director.Parse(example)
	if err != nil {
		t.Fatalf("parsing manifest: %v", err)
	}
}

func TestInstanceGroups(t *testing.T) {
	manifest, _ := director.Parse(example)
	if len(manifest.InstanceGroups) != 2 {
		t.Error("expected 2 instance groups")
	}
}

func TestAddDeleteWorker(t *testing.T) {
	manifest, _ := director.Parse(example)

	group := "worker"
	name := "gce-node-2prs8"
	if err := manifest.AddWorker(name); err != nil {
		t.Error(err)
	}

	if len(manifest.InstanceGroups) != 3 {
		t.Errorf("expected to add %s instance group", group)
	}

	if err := manifest.DeleteWorker(name); err != nil {
		t.Error(err)
	}

	if len(manifest.InstanceGroups) != 2 {
		t.Error("expected to remove new worker instance")
	}
}
